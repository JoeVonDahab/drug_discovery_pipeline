#!/bin/bash

# Script to generate AutoGrid map files (e.g., .maps.fld) for AutoDock-GPU

# === Configuration ===
# 1. Full path to the prepare_gpf4.py script
PREPARE_GPF4_EXEC="/home/joe/miniconda3/envs/autodock/MGLToolsPckgs/AutoDockTools/Utilities24/prepare_gpf4.py"
#PREPARE_GPF4_EXEC="/home/joe/miniconda3/envs/adt/bin/prepare_receptor4.py" # Alternative path, ensure one is correct

# 2. Full path to your compiled autogrid4 executable
AUTOGRID4_EXEC="/home/joe/projects/AutoDOCK/AutoGrid/Linux64_build/autogrid4" # Path from your successful compilation

# 3. Name of your receptor PDBQT file (input for autogrid)
RECEPTOR_PDBQT="receptor.pdbqt"

# 4. Path to a representative ligand PDBQT file (used by prepare_gpf4.py for atom types)
#    Ensure this file exists. It should be one of the files generated by prepare_ligands.py
#    Alternatively, ensure the explicit 'types' list below is comprehensive.
LIGAND_TEMPLATE_PDBQT="ligands_pdbqt/ZINC000260880118.pdbqt" # <--- !!! CHECK AND CHANGE THIS if not present or if you prefer another template !!!

# 5. Output Grid Parameter File (GPF) name
OUTPUT_GPF="receptor_grid.gpf"

# 6. Output AutoGrid Log File (GLG) name
OUTPUT_GLG="receptor_grid.glg"
#    The actual map files (e.g., receptor.maps.fld) will be named based on the RECEPTOR_PDBQT stem.

# 7. Grid parameters
GRID_CENTER_X="24.008"
GRID_CENTER_Y="-1.524"
GRID_CENTER_Z="-10.857"
# Number of grid points in x, y, z dimensions
NUM_POINTS_X="54"
NUM_POINTS_Y="54"
NUM_POINTS_Z="54"
# Grid spacing in Angstroms
GRID_SPACING="0.375"

# 8. Explicit list of atom types for which maps should be generated.
#    !!! CRITICAL: This list MUST include ALL AutoDock atom types present in ANY of your ligands !!!
#    (e.g., A, Br, C, CA, CL, F, FE, HD, I, N, NA, OA, P, S, SA, ZN, etc. - match your PDBQT files)
 # Verify this list against your ligand PDBQT files

# === End of Configuration ===

echo "============================================="
echo "Starting AutoGrid Map Generation"
echo "============================================="
echo "Using prepare_gpf4.py from: $PREPARE_GPF4_EXEC"
echo "Using autogrid4 from: $AUTOGRID4_EXEC"
echo "Receptor PDBQT: $RECEPTOR_PDBQT"
echo "Ligand template for atom types (if used by prepare_gpf4 for type detection): $LIGAND_TEMPLATE_PDBQT"
echo "Explicit atom types for maps: $EXPLICIT_ATOM_TYPES"
echo "Output GPF: $OUTPUT_GPF"
echo "Grid Center: $GRID_CENTER_X $GRID_CENTER_Y $GRID_CENTER_Z"
echo "Grid Points: $NUM_POINTS_X x $NUM_POINTS_Y x $NUM_POINTS_Z"
echo "Grid Spacing: $GRID_SPACING A"
echo ""
echo "IMPORTANT: Ensure your 'autodock' conda environment (or wherever MGLTools Python scripts are) is active for prepare_gpf4.py."
echo ""
EXPLICIT_ATOM_TYPES="Cn,Sc,A,C,N,O,S,F,Cl,P,Br,I,HD,NA,OA,SA"

# Check if executables/scripts exist
if [ ! -f "$PREPARE_GPF4_EXEC" ]; then
    echo "ERROR: 'prepare_gpf4.py' not found at the specified path: $PREPARE_GPF4_EXEC"
    exit 1
fi
if [ ! -x "$AUTOGRID4_EXEC" ]; then # Check if it's executable
    echo "ERROR: 'autogrid4' not found or not executable at the specified path: $AUTOGRID4_EXEC"
    exit 1
fi

# Check if receptor PDBQT file exists
if [ ! -f "$RECEPTOR_PDBQT" ]; then
    echo "ERROR: Receptor PDBQT file '$RECEPTOR_PDBQT' not found in the current directory."
    exit 1
fi

# Check if ligand template PDBQT file exists (it's used with -l flag now)
if [ ! -f "$LIGAND_TEMPLATE_PDBQT" ]; then
    echo "ERROR: Ligand template PDBQT file '$LIGAND_TEMPLATE_PDBQT' not found."
    echo "       This file is specified with the -l flag for prepare_gpf4.py."
    echo "       Please update the LIGAND_TEMPLATE_PDBQT variable in this script to a valid ligand PDBQT file."
    exit 1
fi

# Step 1: Generating Grid Parameter File (GPF)
echo "[Step 1/2] Generating Grid Parameter File ($OUTPUT_GPF)..."
# Use the python from the conda environment.
# MODIFIED: -l now uses LIGAND_TEMPLATE_PDBQT.
# NOTE: For -p gridcenter and -p npts, some versions of prepare_gpf4.py expect comma-separated values
# (e.g., -p gridcenter="$GRID_CENTER_X,$GRID_CENTER_Y,$GRID_CENTER_Z").
# Others might infer correctly from space-separated if passed as a single string.
# The explicit -p types parameter is usually the most reliable way to define map types.

python "$PREPARE_GPF4_EXEC" -r "$RECEPTOR_PDBQT" \
                            -l "$LIGAND_TEMPLATE_PDBQT" \
                            -o "$OUTPUT_GPF" \
                            -p gridcenter="${GRID_CENTER_X},${GRID_CENTER_Y},${GRID_CENTER_Z}" \
                            -p npts="${NUM_POINTS_X},${NUM_POINTS_Y},${NUM_POINTS_Z}" \
                            -p spacing="$GRID_SPACING" \
                            -p types="$EXPLICIT_ATOM_TYPES"
                            

if [ $? -ne 0 ]; then
    echo "  ERROR: prepare_gpf4.py command failed. Check for error messages above."
    echo "  Ensure that the parameters for gridcenter, npts, and types are correctly formatted for your prepare_gpf4.py version."
    exit 1
fi

if [ ! -f "$OUTPUT_GPF" ]; then
    echo "  ERROR: GPF file '$OUTPUT_GPF' was NOT created. This should have been caught by the exit code check."
    exit 1
else
    echo "  Successfully generated GPF file: $OUTPUT_GPF"
fi
echo ""

# Step 2: Running autogrid4 to generate map files
echo "[Step 2/2] Running autogrid4 to generate map files (log: $OUTPUT_GLG)..."
"$AUTOGRID4_EXEC" -p "$OUTPUT_GPF" -l "$OUTPUT_GLG"

if [ $? -ne 0 ]; then
    echo "  ERROR: autogrid4 command failed. Check the autogrid log file: $OUTPUT_GLG for details."
    exit 1
fi

RECEPTOR_STEM=$(basename "$RECEPTOR_PDBQT" .pdbqt)
EXPECTED_MAPS_FLD="${RECEPTOR_STEM}.maps.fld"

if [ ! -f "$EXPECTED_MAPS_FLD" ]; then
    echo "  ERROR: Expected maps file '$EXPECTED_MAPS_FLD' was NOT created by autogrid4."
    echo "         Please check the autogrid log file: $OUTPUT_GLG for details."
    exit 1
else
    echo "  Successfully generated AutoGrid maps! Main map file: $EXPECTED_MAPS_FLD"
fi
echo ""
echo "============================================="
echo "Grid Map Generation Complete."
echo "============================================="